library(tidyverse)
library(haven)
library(jsonlite)
library(httr)
from = 1551398400
to = 1554076800
short <- "https://api.stackexchange.com/2.2/questions?"
full <- paste0(
short,
"page=", page,
'&pagesize=100&',
'fromdate=', from,
'&todate=', to,
'&order=desc&filter=withbody&sort=votes&site=stackoverflow'
)
page = 1
full <- paste0(
short,
"page=", page,
'&pagesize=100&',
'fromdate=', from,
'&todate=', to,
'&order=desc&filter=withbody&sort=votes&site=stackoverflow'
)
full
request <- GET(
url = full
)
request$status_code
response <- content(request, as = "text", encoding = 'utf-8')
raw_json <- fromJSON(response)
out <- raw_json$items %>% as_tibble()
out
out %>% View()
gen_request_df <- function(from, to, page) {
# from = 1551398400
# to = 1554076800
# page = 1
short <- "https://api.stackexchange.com/2.2/questions?"
full <- paste0(
short,
"page=", page,
'&pagesize=100&',
'fromdate=', from,
'&todate=', to,
'&order=desc&filter=withbody&sort=votes&site=stackoverflow'
)
request <- GET(
url = full
)
message(request$status_code)
# looks good.
# gather data from pull and parse our json
response <- content(request, as = "text", encoding = 'utf-8')
raw_json <- fromJSON(response)
out <- raw_json$items %>% as_tibble()
return(out)
}
test <- gen_request_df(from = 1551398400, to = 1554076800, page = 1)
test
date_df <- tibble(
starts = seq(ymd('2019-01-01'),ymd('2019-03-01'), by = 'months'),
ends = starts
)
library(lubridate)
date_df <- tibble(
starts = seq(ymd('2019-01-01'),ymd('2019-03-01'), by = 'months'),
ends = starts
)
date_df
# this will convert last day to real last day
day(date_df$ends) <- days_in_month(date_df$starts)
date_df
# convert to unix epoch
date_df <-
date_df %>%
mutate_all(~{
as.numeric(as.POSIXct(as.character(.)))
})
all_df <- map2_dfr(date_df$starts, date_df$ends, function(start, end){
Sys.sleep(0.2)
message(paste0('grabbing ', start))
gen_request_df(from = start, to = end, page = 1) #%>%
#select(tags, view_count, answer_count, score, creation_date, title, body)
})
all_df <- map2(date_df$starts[1:2], date_df$ends[1:2], function(start, end){
Sys.sleep(0.2)
message(paste0('grabbing ', start))
gen_request_df(from = start, to = end, page = 1) #%>%
#select(tags, view_count, answer_count, score, creation_date, title, body)
})
all_df
do.call(rbind.data.frame, all_df)
all_df[[1]]
all_df[[1]] %>% str()
all_df[[1]] %>% str()$tags
all_df[[1]]$tags
names(all_df[[1]])
all_df[[1]]$owner
gen_request_df <- function(from, to, page) {
# from = 1551398400
# to = 1554076800
# page = 1
short <- "https://api.stackexchange.com/2.2/questions?"
full <- paste0(
short,
"page=", page,
'&pagesize=100&',
'fromdate=', from,
'&todate=', to,
'&order=desc&filter=withbody&sort=votes&site=stackoverflow'
)
request <- GET(
url = full
)
message(paste0('Status code: ', request$status_code))
# looks good.
# gather data from pull and parse our json
response <- content(request, as = "text", encoding = 'utf-8')
raw_json <- fromJSON(response)
out <- raw_json$items %>% as_tibble()
return(out)
}
date_df <- tibble(
starts = seq(ymd('2018-01-01'),ymd('2019-03-01'), by = 'months'),
ends = starts
)
# this will convert last day to real last day
day(date_df$ends) <- days_in_month(date_df$starts)
# convert to unix epoch
date_df <-
date_df %>%
mutate_all(~{
as.numeric(as.POSIXct(as.character(.)))
})
all_list <- map2(date_df$starts, date_df$ends, function(start, end){
Sys.sleep(0.2)
message(paste0('grabbing ', start))
gen_request_df(from = start, to = end, page = 1) #%>%
#select(tags, view_count, answer_count, score, creation_date, title, body)
})
all_list
do.call(rbind.data.frame, all_df)
do.call(rbind.data.frame, all_list)
all_list[[1]]
all_list[[1]] %>% View()
item = all_list[[1]]
item$tags
# one-hot-encode tags (currently a list of character vectors)
tag_cols <- item$tags
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, sep = " ")
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(paste)
tag_cols
tag_cols %>% str()
item$tags %>%
map(paste)
item$tags %>%
map(., paste)
items$tags[[1]]
item$tags[[1]]
item$tags[[1]] %>% paste()
item$tags[[1]][1]
item$tags[[1]][2]
item$tags[[1]] %>% str_c
item$tags[[1]] %>% str_c()
?str_c
item$tags[[1]] %>% str_c(sep = " ")
item$tags[[1]] %>% str_c(sep = " ", collapse = TRUE)
item$tags[[1]] %>% str_c(collapse = " ")
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ")
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
as.vector()
as.vector
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
as_tibble()
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
tibble(test = .)
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
flatten()
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
unlist()
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
unlist() %>%
tibble(tag = .)
tag_cols
?shapesplitstac
install.packages("splitstackshape")
?splitstackshape::cSplit_e
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
unlist() %>%
tibble(tag = .) %>%
splitstackshape::cSplit_e(tag, sep = " ", type = "character", drop = TRUE)
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
unlist() %>%
tibble(tag = .) %>%
splitstackshape::cSplit_e(data = ., split.col = tag,
sep = " ", type = "character", drop = TRUE)
item$tags %>%
map(str_c, collapse = " ") %>%
unlist() %>%
tibble(tag = .)
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
unlist() %>%
tibble(tag = .) %>%
splitstackshape::cSplit_e(split.col = "tag",
sep = " ", type = "character", drop = TRUE)
tag_cols
# one-hot-encode tags (currently a list of character vectors)
tag_cols <-
item$tags %>%
map(str_c, collapse = " ") %>%
unlist() %>%
tibble(tag = .) %>%
splitstackshape::cSplit_e(split.col = "tag",
sep = " ", type = "character", drop = TRUE,
fill = 0)
View(tag_cols)
item$owner.reputation
item
owner$reputation
item$owner$reputation
create_row <- function(item) {
# item = all_list[[1]]
# one-hot-encode tags (currently a list of character vectors)
tibble(
question_id = item$question_id,
top_answer_id = item$accepted_answer_id,
owner_id = item$owner$user_id,
owner_name = item$owner_display_name,
owner_reputation = item$owner$reputation,
views = item$view_count,
answer_count = item$answer_count,
score = item$score,
date = item$creation_date,
title = item$title,
body = item$body,
tag =
item$tags %>%
map(str_c, collapse = " ") %>%
unlist()
)
}
map_dfr(all_list, create_row)
# one-hot-encode tags (currently a list of character vectors)
tibble(
question_id = item$question_id,
top_answer_id = item$accepted_answer_id,
owner_id = item$owner$user_id,
owner_name = item$owner$display_name,
owner_reputation = item$owner$reputation,
views = item$view_count,
answer_count = item$answer_count,
score = item$score,
date = item$creation_date,
title = item$title,
body = item$body,
tag =
item$tags %>%
map(str_c, collapse = " ") %>%
unlist()
)
create_row <- function(item) {
# item = all_list[[1]]
# one-hot-encode tags (currently a list of character vectors)
tibble(
question_id = item$question_id,
top_answer_id = item$accepted_answer_id,
owner_id = item$owner$user_id,
owner_name = item$owner$display_name,
owner_reputation = item$owner$reputation,
views = item$view_count,
answer_count = item$answer_count,
score = item$score,
date = item$creation_date,
title = item$title,
body = item$body,
tag =
item$tags %>%
map(str_c, collapse = " ") %>%
unlist()
)
}
map_dfr(all_list, create_row)
full_df <- map_dfr(all_list, create_row)
View(full_df)
full_df$question_id %>% unique %>% length
date_df <- tibble(
starts = seq(ymd('2017-01-01'),ymd('2019-03-01'), by = 'months'),
ends = starts
)
# this will convert last day to real last day
day(date_df$ends) <- days_in_month(date_df$starts)
# convert to unix epoch
date_df <-
date_df %>%
mutate_all(~{
as.numeric(as.POSIXct(as.character(.)))
})
all_list <- map2(date_df$starts, date_df$ends, function(start, end){
Sys.sleep(0.2)
message(paste0('grabbing ', start))
gen_request_df(from = start, to = end, page = 1) #%>%
#select(tags, view_count, answer_count, score, creation_date, title, body)
})
full_df <- map_dfr(all_list, create_row)
full_df$question_id %>% unique %>% length
View(full_df)
write_rds(full_df, 'jan1-2017_mar1-2019.rds')
write_rds(full_df, 'data/jan1-2017_mar1-2019.rds')
5
dir()
write_rds(full_df, 'stackoverflow_jan1-2017_mar1-2019.rds')
